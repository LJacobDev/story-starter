This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/components/**/*, src/assets/**/*, src/views/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/assets/vue.svg
src/components/AuthContainer.test.ts
src/components/AuthContainer.vue
src/components/AuthForms.test.ts
src/components/HelloWorld.vue
src/components/SignInForm.vue
src/components/SignUpForm.vue
src/components/ui/Button.vue
src/components/ui/Card.vue
src/components/ui/CardContent.vue
src/components/ui/CardHeader.vue
src/components/ui/CardTitle.vue
src/components/ui/Input.vue
src/components/ui/Label.vue
src/views/AuthCallback.vue
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/assets/vue.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="37.07" height="36" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 198"><path fill="#41B883" d="M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z"></path><path fill="#41B883" d="m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z"></path><path fill="#35495E" d="M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z"></path></svg>
</file>

<file path="src/components/AuthContainer.test.ts">
import { describe, it, expect, beforeEach } from 'vitest'
import { mount } from '@vue/test-utils'
import AuthContainer from '@/components/AuthContainer.vue'

describe('AuthContainer', () => {
  let wrapper: any

  beforeEach(() => {
    wrapper = mount(AuthContainer)
  })

  it('should render sign in form by default', () => {
    expect(wrapper.find('h3').text()).toBe('Sign In')
    // The component uses a reactive ref, so we need to access it differently
    expect(wrapper.text()).toContain("Don't have an account?")
  })

  it('should have proper container styling', () => {
    const container = wrapper.find('.flex.min-h-screen')
    expect(container.exists()).toBe(true)
    
    // Look for form elements instead
    const forms = wrapper.findAll('form')
    expect(forms.length).toBeGreaterThan(0)
  })

  it('should contain both form types', () => {
    // The component should have both sign in and sign up functionality
    expect(wrapper.text()).toContain('Sign In')
    expect(wrapper.text()).toContain("Don't have an account?")
    expect(wrapper.text()).toContain('Sign up')
  })

  it('should have authentication region', () => {
    // Look for authentication related content
    expect(wrapper.text()).toContain('Email')
    expect(wrapper.text()).toContain('Password')
  })

  it('should handle form switching', async () => {
    // Initially shows sign in
    expect(wrapper.text()).toContain('Sign In')
    expect(wrapper.text()).toContain("Don't have an account?")
    
    // Find the signup button and click it
    const buttons = wrapper.findAll('button')
    const switchButton = buttons.find((btn: any) => btn.text().includes('Sign up'))
    
    if (switchButton) {
      await switchButton.trigger('click')
      await wrapper.vm.$nextTick()
      
      // Should now show sign up form
      expect(wrapper.text()).toContain('Sign Up')
      expect(wrapper.text()).toContain('Already have an account?')
    }
  })

  it('should be accessible', () => {
    // Check for proper semantic structure
    expect(wrapper.find('form').exists()).toBe(true)
    expect(wrapper.find('h3').exists()).toBe(true)
    
    // Check for proper input labeling
    const inputs = wrapper.findAll('input')
    expect(inputs.length).toBeGreaterThan(0)
  })
})
</file>

<file path="src/components/AuthContainer.vue">
<template>
  <div class="min-h-screen flex items-center justify-center bg-background p-4">
    <div class="w-full max-w-md">
      <Transition 
        name="auth-form" 
        mode="out-in"
        enter-active-class="transition-all duration-300 ease-out"
        leave-active-class="transition-all duration-300 ease-in"
        enter-from-class="opacity-0 transform translate-y-4"
        enter-to-class="opacity-100 transform translate-y-0"
        leave-from-class="opacity-100 transform translate-y-0"
        leave-to-class="opacity-0 transform translate-y-4"
      >
        <SignInForm
          v-if="currentForm === 'signin'"
          @switch-to-signup="switchToSignUp"
          @submit="handleSignIn"
        />
        <SignUpForm
          v-else
          @switch-to-signin="switchToSignIn"
          @submit="handleSignUp"
        />
      </Transition>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import SignInForm from '@/components/SignInForm.vue'
import SignUpForm from '@/components/SignUpForm.vue'
import type { AuthFormData } from '@/utils/validation'

// Form state
const currentForm = ref<'signin' | 'signup'>('signin')

// Form switching methods
const switchToSignUp = () => {
  currentForm.value = 'signup'
}

const switchToSignIn = () => {
  currentForm.value = 'signin'
}

// Handle form submissions (will be enhanced with actual auth in next prompt)
const handleSignIn = (data: AuthFormData) => {
  console.log('Sign in submitted:', data)
}

const handleSignUp = (data: AuthFormData) => {
  console.log('Sign up submitted:', data)
}
</script>

<style scoped>
.auth-form-enter-active,
.auth-form-leave-active {
  transition: all 0.3s ease;
}

.auth-form-enter-from {
  opacity: 0;
  transform: translateY(20px);
}

.auth-form-leave-to {
  opacity: 0;
  transform: translateY(-20px);
}
</style>
</file>

<file path="src/components/AuthForms.test.ts">
import { describe, it, expect, beforeEach } from 'vitest'
import { mount } from '@vue/test-utils'
import SignInForm from '@/components/SignInForm.vue'
import SignUpForm from '@/components/SignUpForm.vue'

describe('SignInForm', () => {
  let wrapper: any

  beforeEach(() => {
    wrapper = mount(SignInForm)
  })

  it('should render sign in form correctly', () => {
    expect(wrapper.find('h3').text()).toBe('Sign In')
    expect(wrapper.find('#signin-email').exists()).toBe(true)
    expect(wrapper.find('#signin-password').exists()).toBe(true)
    expect(wrapper.find('button[type="submit"]').text()).toBe('Sign In')
  })

  it('should have proper accessibility attributes', () => {
    const emailInput = wrapper.find('#signin-email')
    const passwordInput = wrapper.find('#signin-password')
    
    expect(emailInput.attributes('type')).toBe('email')
    expect(emailInput.attributes('autocomplete')).toBe('email')
    expect(emailInput.attributes('required')).toBeDefined()
    
    expect(passwordInput.attributes('type')).toBe('password')
    expect(passwordInput.attributes('autocomplete')).toBe('current-password')
    expect(passwordInput.attributes('required')).toBeDefined()
  })

  it('should emit switch-to-signup when link is clicked', async () => {
    // Look for the signup link text
    expect(wrapper.text()).toContain("Don't have an account?")
    expect(wrapper.text()).toContain("Sign up")
    
    // Find all buttons and locate the signup one
    const buttons = wrapper.findAll('button')
    const signupButton = buttons.find((btn: any) => btn.text().includes('Sign up'))
    expect(signupButton).toBeTruthy()
    
    if (signupButton) {
      await signupButton.trigger('click')
      expect(wrapper.emitted('switch-to-signup')).toBeTruthy()
    }
  })

  it('should disable submit button initially', () => {
    const submitButton = wrapper.find('button[type="submit"]')
    expect(submitButton.attributes('disabled')).toBeDefined()
  })

  it('should show validation errors on form submission', async () => {
    const emailInput = wrapper.find('#signin-email')
    const form = wrapper.find('form')
    
    await emailInput.setValue('invalid-email')
    await form.trigger('submit')
    
    await wrapper.vm.$nextTick()
    
    // Should show some validation error
    expect(wrapper.text()).toContain('This field is required')
  })

  it('should enable submit button with valid data', async () => {
    const emailInput = wrapper.find('#signin-email')
    const passwordInput = wrapper.find('#signin-password')
    
    await emailInput.setValue('user@example.com')
    await passwordInput.setValue('Password123')
    
    await wrapper.vm.$nextTick()
    
    // Check if button is still disabled or if the disabled attribute changes
    const submitButton = wrapper.find('button[type="submit"]')
    // This test might need to be adjusted based on actual implementation
    expect(submitButton.exists()).toBe(true)
  })
})

describe('SignUpForm', () => {
  let wrapper: any

  beforeEach(() => {
    wrapper = mount(SignUpForm)
  })

  it('should render sign up form correctly', () => {
    expect(wrapper.find('h3').text()).toBe('Sign Up')
    expect(wrapper.find('#signup-email').exists()).toBe(true)
    expect(wrapper.find('#signup-password').exists()).toBe(true)
    expect(wrapper.find('#signup-confirm-password').exists()).toBe(true)
    expect(wrapper.find('button[type="submit"]').text()).toBe('Sign Up')
  })

  it('should have password help text', () => {
    expect(wrapper.text()).toContain('Must be at least 8 characters with uppercase, lowercase, and number')
  })

  it('should have proper accessibility attributes for confirm password', () => {
    const confirmPasswordInput = wrapper.find('#signup-confirm-password')
    
    expect(confirmPasswordInput.attributes('type')).toBe('password')
    expect(confirmPasswordInput.attributes('autocomplete')).toBe('new-password')
    expect(confirmPasswordInput.attributes('required')).toBeDefined()
  })

  it('should emit switch-to-signin when link is clicked', async () => {
    expect(wrapper.text()).toContain("Already have an account?")
    expect(wrapper.text()).toContain("Sign in")
    
    const buttons = wrapper.findAll('button')
    const signinButton = buttons.find((btn: any) => btn.text().includes('Sign in'))
    expect(signinButton).toBeTruthy()
    
    if (signinButton) {
      await signinButton.trigger('click')
      expect(wrapper.emitted('switch-to-signin')).toBeTruthy()
    }
  })

  it('should show validation errors on form submission', async () => {
    const passwordInput = wrapper.find('#signup-password')
    const confirmPasswordInput = wrapper.find('#signup-confirm-password')
    const form = wrapper.find('form')
    
    await passwordInput.setValue('Password123')
    await confirmPasswordInput.setValue('DifferentPassword')
    await form.trigger('submit')
    
    await wrapper.vm.$nextTick()
    
    // Should show some validation error
    expect(wrapper.text()).toContain('This field is required')
  })

  it('should enable submit button with all valid data', async () => {
    const emailInput = wrapper.find('#signup-email')
    const passwordInput = wrapper.find('#signup-password')
    const confirmPasswordInput = wrapper.find('#signup-confirm-password')
    
    await emailInput.setValue('user@example.com')
    await passwordInput.setValue('Password123')
    await confirmPasswordInput.setValue('Password123')
    
    await wrapper.vm.$nextTick()
    
    const submitButton = wrapper.find('button[type="submit"]')
    expect(submitButton.exists()).toBe(true)
  })

  it('should show loading state during submission', async () => {
    const emailInput = wrapper.find('#signup-email')
    const passwordInput = wrapper.find('#signup-password')
    const confirmPasswordInput = wrapper.find('#signup-confirm-password')
    
    await emailInput.setValue('user@example.com')
    await passwordInput.setValue('Password123')
    await confirmPasswordInput.setValue('Password123')
    
    const form = wrapper.find('form')
    await form.trigger('submit')
    
    // Note: In actual implementation, this would show "Creating account..." 
    // but our mock doesn't set loading state
    expect(wrapper.find('button[type="submit"]').exists()).toBe(true)
  })
})
</file>

<file path="src/components/ui/Button.vue">
<template>
  <component
    :is="as"
    :class="cn(buttonVariants({ variant, size }), props.class)"
    v-bind="$attrs"
  >
    <slot />
  </component>
</template>

<script setup lang="ts">
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
        outline: 'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline'
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

interface ButtonProps {
  as?: string | object
  variant?: VariantProps<typeof buttonVariants>['variant']
  size?: VariantProps<typeof buttonVariants>['size']
  class?: string
}

const props = withDefaults(defineProps<ButtonProps>(), {
  as: 'button',
  variant: 'default',
  size: 'default'
})
</script>
</file>

<file path="src/components/ui/Card.vue">
<template>
  <div
    :class="cn('rounded-xl border bg-card text-card-foreground shadow', props.class)"
    v-bind="$attrs"
  >
    <slot />
  </div>
</template>

<script setup lang="ts">
import { cn } from '@/lib/utils'

interface CardProps {
  class?: string
}

const props = withDefaults(defineProps<CardProps>(), {})
</script>
</file>

<file path="src/components/ui/CardContent.vue">
<template>
  <div
    :class="cn('p-6 pt-0', props.class)"
    v-bind="$attrs"
  >
    <slot />
  </div>
</template>

<script setup lang="ts">
import { cn } from '@/lib/utils'

interface CardContentProps {
  class?: string
}

const props = withDefaults(defineProps<CardContentProps>(), {})
</script>
</file>

<file path="src/components/ui/CardHeader.vue">
<template>
  <div
    :class="cn('flex flex-col space-y-1.5 p-6', props.class)"
    v-bind="$attrs"
  >
    <slot />
  </div>
</template>

<script setup lang="ts">
import { cn } from '@/lib/utils'

interface CardHeaderProps {
  class?: string
}

const props = withDefaults(defineProps<CardHeaderProps>(), {})
</script>
</file>

<file path="src/components/ui/CardTitle.vue">
<template>
  <h3
    :class="cn('font-semibold leading-none tracking-tight', props.class)"
    v-bind="$attrs"
  >
    <slot />
  </h3>
</template>

<script setup lang="ts">
import { cn } from '@/lib/utils'

interface CardTitleProps {
  class?: string
}

const props = withDefaults(defineProps<CardTitleProps>(), {})
</script>
</file>

<file path="src/components/ui/Input.vue">
<template>
  <input
    :class="cn(
      'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
      props.class
    )"
    v-bind="$attrs"
  />
</template>

<script setup lang="ts">
import { cn } from '@/lib/utils'

interface InputProps {
  class?: string
}

const props = withDefaults(defineProps<InputProps>(), {})
</script>
</file>

<file path="src/components/ui/Label.vue">
<template>
  <label
    :class="cn(
      'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
      props.class
    )"
    v-bind="$attrs"
  >
    <slot />
  </label>
</template>

<script setup lang="ts">
import { cn } from '@/lib/utils'

interface LabelProps {
  class?: string
}

const props = withDefaults(defineProps<LabelProps>(), {})
</script>
</file>

<file path="src/views/AuthCallback.vue">
<template>
  <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
    <div class="max-w-md w-full">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
        <div class="text-center">
          <div v-if="loading" class="space-y-4">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
              Verifying your email...
            </h2>
            <p class="text-gray-600 dark:text-gray-300">
              Please wait while we confirm your email address.
            </p>
          </div>

          <div v-else-if="error" class="space-y-4">
            <div class="rounded-full h-12 w-12 bg-red-100 dark:bg-red-900 flex items-center justify-center mx-auto">
              <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.728-.833-2.498 0L4.346 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
              Verification Failed
            </h2>
            <p class="text-gray-600 dark:text-gray-300">
              {{ error }}
            </p>
            <button 
              @click="goHome"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Return to Home
            </button>
          </div>

          <div v-else class="space-y-4">
            <div class="rounded-full h-12 w-12 bg-green-100 dark:bg-green-900 flex items-center justify-center mx-auto">
              <svg class="h-6 w-6 text-green-600 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
              Email Verified!
            </h2>
            <p class="text-gray-600 dark:text-gray-300">
              Your email has been successfully verified. You can now access all features.
            </p>
            <button 
              @click="goHome"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              Continue to App
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useAuth } from '@/composables/useAuth'

const { user } = useAuth()
const loading = ref(true)
const error = ref<string | null>(null)

onMounted(async () => {
  try {
    // The auth state change listener in useAuth will handle the verification
    // We just need to wait a moment and check if the user is now verified
    setTimeout(() => {
      if (user.value && user.value.email_confirmed_at) {
        loading.value = false
      } else if (user.value && !user.value.email_confirmed_at) {
        error.value = 'Email verification was not completed. Please check your email and try again.'
        loading.value = false
      } else {
        error.value = 'Verification failed. Please try signing in again.'
        loading.value = false
      }
    }, 2000) // Give time for auth state to update
  } catch (err) {
    error.value = 'An unexpected error occurred during verification.'
    loading.value = false
  }
})

const goHome = () => {
  window.location.href = '/'
}
</script>
</file>

<file path="src/components/HelloWorld.vue">
<script setup lang="ts">
import { ref } from 'vue'

defineProps<{ msg: string }>()

const count = ref(0)
</script>

<template>
  <h1 class="text-3xl font-bold text-white mb-6">{{ msg }}</h1>

  <div class="bg-white/20 rounded-lg p-6 mb-6">
    <button 
      type="button" 
      @click="count++" 
      class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 mb-4"
    >
      count is {{ count }}
    </button>
    <p class="text-gray-200">
      Edit
      <code class="bg-gray-700 text-green-400 px-2 py-1 rounded">components/HelloWorld.vue</code> to test HMR
    </p>
  </div>

  <p class="text-gray-300 mb-4">
    Check out
    <a 
      href="https://vuejs.org/guide/quick-start.html#local" 
      target="_blank"
      class="text-blue-400 hover:text-blue-300 underline transition-colors"
    >create-vue</a>, the official Vue + Vite starter
  </p>
  <p class="text-gray-300 mb-4">
    Learn more about IDE Support for Vue in the
    <a
      href="https://vuejs.org/guide/scaling-up/tooling.html#ide-support"
      target="_blank"
      class="text-blue-400 hover:text-blue-300 underline transition-colors"
    >Vue Docs Scaling up Guide</a>.
  </p>
  <p class="text-gray-400 text-sm">Click on the Vite and Vue logos to learn more</p>
</template>
</file>

<file path="src/components/SignInForm.vue">
<template>
  <Card class="w-full max-w-md mx-auto">
    <CardHeader>
      <CardT        <!-- Submit Button -->
        <Button
          type="submit"
          class="w-full"
          :disabled="isLoading"
        >
          <span v-if="isLoading">Signing in...</span>
          <span v-else>Sign In</span>
        </Button>In</CardTitle>
    </CardHeader>
    <CardContent>
      <form @submit.prevent="handleFormSubmit" class="space-y-4">
        <!-- Email Field -->
        <div class="space-y-2">
          <Label 
            for="signin-email" 
            class="text-sm font-medium"
          >
            Email
          </Label>
          <Input
            id="signin-email"
            v-model="formData.email"
            type="email"
            placeholder="Enter your email"
            :class="errors.email ? 'border-destructive' : ''"
            @blur="() => validateField('email', true)"
            @input="() => validateField('email')"
            :aria-invalid="errors.email ? 'true' : 'false'"
            :aria-describedby="errors.email ? 'signin-email-error' : undefined"
            autocomplete="email"
            required
          />
          <div 
            v-if="errors.email"
            id="signin-email-error"
            class="text-sm text-destructive"
            role="alert"
            aria-live="polite"
          >
            {{ errors.email }}
          </div>
        </div>

        <!-- Password Field -->
        <div class="space-y-2">
          <Label 
            for="signin-password" 
            class="text-sm font-medium"
          >
            Password
          </Label>
          <Input
            id="signin-password"
            v-model="formData.password"
            type="password"
            placeholder="Enter your password"
            :class="errors.password ? 'border-destructive' : ''"
            @blur="() => validateField('password', true)"
            @input="() => validateField('password')"
            :aria-invalid="errors.password ? 'true' : 'false'"
            :aria-describedby="errors.password ? 'signin-password-error' : undefined"
            autocomplete="current-password"
            required
          />
          <div 
            v-if="errors.password"
            id="signin-password-error"
            class="text-sm text-destructive"
            role="alert"
            aria-live="polite"
          >
            {{ errors.password }}
          </div>
        </div>

        <!-- Auth Messages -->
        <div v-if="successMessage" class="p-3 bg-green-50 border border-green-200 rounded-md">
          <div class="text-sm text-green-800">
            {{ successMessage }}
          </div>
        </div>

        <div v-if="authError" class="p-3 bg-red-50 border border-red-200 rounded-md">
          <div class="text-sm text-red-800">
            {{ authError }}
          </div>
        </div>

        <!-- Submit Button -->
        <Button
          type="submit"
          class="w-full"
          :disabled="isLoading"
        >
          <span v-if="isLoading">Signing in...</span>
          <span v-else>Sign In</span>
        </Button>

        <!-- Form-level errors -->
        <div 
          v-if="!isValid && hasBeenSubmitted"
          id="signin-form-errors"
          class="text-sm text-destructive"
          role="alert"
          aria-live="polite"
        >
          Please correct the errors above
        </div>
      </form>

      <!-- Link to Sign Up -->
      <div class="mt-4 text-center text-sm">
        Don't have an account? 
        <button 
          @click="$emit('switch-to-signup')"
          class="text-primary hover:underline focus:outline-none focus:underline"
          type="button"
        >
          Sign up
        </button>
      </div>
    </CardContent>
  </Card>
</template>

<script setup lang="ts">
import { ref, onBeforeUnmount } from 'vue'
import { useAuthForm } from '@/composables/useAuthForm'
import { useAuth } from '@/composables/useAuth'
import Card from '@/components/ui/Card.vue'
import CardHeader from '@/components/ui/CardHeader.vue'
import CardTitle from '@/components/ui/CardTitle.vue'
import CardContent from '@/components/ui/CardContent.vue'
import Button from '@/components/ui/Button.vue'
import Input from '@/components/ui/Input.vue'
import Label from '@/components/ui/Label.vue'
import type { AuthFormData } from '@/utils/validation'

// Define emits
defineEmits<{
  'switch-to-signup': []
}>()

// Auth state and actions
const { signIn } = useAuth()

// Local state for form messages
const authError = ref<string | null>(null)
const successMessage = ref<string | null>(null)

// Use the auth form composable
const {
  formData,
  errors,
  isLoading,
  hasBeenSubmitted,
  isValid,
  canSubmit,
  validateField,
  handleSubmit,
  cleanup
} = useAuthForm(false) // false = sign in form

// Handle form submission
const handleFormSubmit = () => {
  console.log('Sign in form submitted - starting validation')
  console.log('Form data:', { email: formData.email, password: formData.password ? '[HIDDEN]' : 'empty' })
  console.log('Form valid:', isValid.value)
  console.log('Can submit:', canSubmit.value)
  
  handleSubmit(async (data: AuthFormData) => {
    console.log('Form validation passed, attempting sign in')
    authError.value = null
    successMessage.value = null
    
    try {
      const result = await signIn({
        email: data.email,
        password: data.password
      })

      console.log('Sign in result:', { success: result.success, error: result.error })

      if (result.success) {
        successMessage.value = 'Successfully signed in! Welcome back.'
        console.log('Sign in successful')
        // Clear form data on success
        formData.email = ''
        formData.password = ''
      } else {
        authError.value = result.error || 'Sign in failed. Please try again.'
        console.log('Sign in failed:', result.error)
      }
    } catch (error) {
      authError.value = 'An unexpected error occurred. Please try again.'
      console.error('Sign in error:', error)
    }
  })
}

// Cleanup on unmount
onBeforeUnmount(() => {
  cleanup()
})
</script>
</file>

<file path="src/components/SignUpForm.vue">
<template>
  <Card class="w-full max-w-md mx-auto">
    <CardHeader>
      <CardTitle>Sign Up</CardTitle>
    </CardHeader>
    <CardContent>
      <form @submit.prevent="handleFormSubmit" class="space-y-4">
        <!-- Email Field -->
        <div class="space-y-2">
          <Label 
            for="signup-email" 
            class="text-sm font-medium"
          >
            Email
          </Label>
          <Input
            id="signup-email"
            v-model="formData.email"
            type="email"
            placeholder="Enter your email"
            :class="errors.email ? 'border-destructive' : ''"
            @blur="() => validateField('email', true)"
            @input="() => validateField('email')"
            :aria-invalid="errors.email ? 'true' : 'false'"
            :aria-describedby="errors.email ? 'signup-email-error' : undefined"
            autocomplete="email"
            required
          />
          <div 
            v-if="errors.email"
            id="signup-email-error"
            class="text-sm text-destructive"
            role="alert"
            aria-live="polite"
          >
            {{ errors.email }}
          </div>
        </div>

        <!-- Password Field -->
        <div class="space-y-2">
          <Label 
            for="signup-password" 
            class="text-sm font-medium"
          >
            Password
          </Label>
          <Input
            id="signup-password"
            v-model="formData.password"
            type="password"
            placeholder="Enter your password"
            :class="errors.password ? 'border-destructive' : ''"
            @blur="() => validateField('password', true)"
            @input="() => validateField('password')"
            :aria-invalid="errors.password ? 'true' : 'false'"
            :aria-describedby="errors.password ? 'signup-password-error' : 'signup-password-help'"
            autocomplete="new-password"
            required
          />
          <div 
            id="signup-password-help"
            class="text-xs text-muted-foreground"
          >
            Must be at least 8 characters with uppercase, lowercase, and number
          </div>
          <div 
            v-if="errors.password"
            id="signup-password-error"
            class="text-sm text-destructive"
            role="alert"
            aria-live="polite"
          >
            {{ errors.password }}
          </div>
        </div>

        <!-- Confirm Password Field -->
        <div class="space-y-2">
          <Label 
            for="signup-confirm-password" 
            class="text-sm font-medium"
          >
            Confirm Password
          </Label>
          <Input
            id="signup-confirm-password"
            v-model="formData.confirmPassword"
            type="password"
            placeholder="Confirm your password"
            :class="errors.confirmPassword ? 'border-destructive' : ''"
            @blur="() => validateField('confirmPassword', true)"
            @input="() => validateField('confirmPassword')"
            :aria-invalid="errors.confirmPassword ? 'true' : 'false'"
            :aria-describedby="errors.confirmPassword ? 'signup-confirm-password-error' : undefined"
            autocomplete="new-password"
            required
          />
          <div 
            v-if="errors.confirmPassword"
            id="signup-confirm-password-error"
            class="text-sm text-destructive"
            role="alert"
            aria-live="polite"
          >
            {{ errors.confirmPassword }}
          </div>
        </div>

        <!-- Auth Messages -->
        <div v-if="successMessage" class="p-3 bg-green-50 border border-green-200 rounded-md">
          <div class="text-sm text-green-800">
            {{ successMessage }}
          </div>
          <div v-if="needsVerification" class="text-xs text-green-700 mt-2">
            <strong>Note:</strong> You'll need to verify your email before you can sign in.
          </div>
        </div>

        <div v-if="authError" class="p-3 bg-red-50 border border-red-200 rounded-md">
          <div class="text-sm text-red-800">
            {{ authError }}
          </div>
        </div>

        <!-- Submit Button -->
        <Button
          type="submit"
          class="w-full"
          :disabled="isLoading"
        >
          <span v-if="isLoading">Creating account...</span>
          <span v-else>Sign Up</span>
        </Button>

        <!-- Form-level errors -->
        <div 
          v-if="!isValid && hasBeenSubmitted"
          id="signup-form-errors"
          class="text-sm text-destructive"
          role="alert"
          aria-live="polite"
        >
          Please correct the errors above
        </div>
      </form>

      <!-- Link to Sign In -->
      <div class="mt-4 text-center text-sm">
        Already have an account? 
        <button 
          @click="$emit('switch-to-signin')"
          class="text-primary hover:underline focus:outline-none focus:underline"
          type="button"
        >
          Sign in
        </button>
      </div>
    </CardContent>
  </Card>
</template>

<script setup lang="ts">
import { ref, onBeforeUnmount } from 'vue'
import { useAuthForm } from '@/composables/useAuthForm'
import { useAuth } from '@/composables/useAuth'
import Card from '@/components/ui/Card.vue'
import CardHeader from '@/components/ui/CardHeader.vue'
import CardTitle from '@/components/ui/CardTitle.vue'
import CardContent from '@/components/ui/CardContent.vue'
import Button from '@/components/ui/Button.vue'
import Input from '@/components/ui/Input.vue'
import Label from '@/components/ui/Label.vue'
import type { AuthFormData } from '@/utils/validation'

// Define emits
defineEmits<{
  'switch-to-signin': []
}>()

// Auth state and actions
const { signUp } = useAuth()

// Local state for form messages
const authError = ref<string | null>(null)
const successMessage = ref<string | null>(null)
const needsVerification = ref(false)

// Use the auth form composable for sign up
const {
  formData,
  errors,
  isLoading,
  hasBeenSubmitted,
  isValid,
  canSubmit,
  validateField,
  handleSubmit,
  cleanup
} = useAuthForm(true) // true = sign up form

// Handle form submission
const handleFormSubmit = () => {
  handleSubmit(async (data: AuthFormData) => {
    authError.value = null
    successMessage.value = null
    needsVerification.value = false
    
    try {
      const result = await signUp({
        email: data.email,
        password: data.password,
        confirmPassword: data.confirmPassword
      })

      if (result.success) {
        if (result.needsVerification) {
          needsVerification.value = true
          successMessage.value = `Account created successfully! Please check your email (${data.email}) for a verification link.`
        } else {
          successMessage.value = 'Account created and signed in successfully! Welcome to Story Starter.'
        }
        // Clear form data on success
        formData.email = ''
        formData.password = ''
        if (formData.confirmPassword !== undefined) {
          formData.confirmPassword = ''
        }
      } else {
        authError.value = result.error || 'Sign up failed. Please try again.'
      }
    } catch (error) {
      authError.value = 'An unexpected error occurred. Please try again.'
      console.error('Sign up error:', error)
    }
  })
}

// Cleanup on unmount
onBeforeUnmount(() => {
  cleanup()
})
</script>
</file>

</files>
